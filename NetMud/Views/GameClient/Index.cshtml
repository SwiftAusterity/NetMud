@model NetMud.Models.GameContextModel
<div class="keyLegend entityDataInfoCard">
    <div>
        <span>KEY</span>
        <span>FUNCTION</span>
    </div>
    <div>
        <span>enter</span>
        <span>Submit/Focus</span>
    </div>
    <div>
        <span>esc</span>
        <span>Clear Input</span>
    </div>
    <div>
        <span>Page Up/Down</span>
        <span>Output Scroll Page</span>
    </div>
    <div>
        <span>End/Home</span>
        <span>Output Scroll Max</span>
    </div>
    <div>
        <span>Up/Down Arrow</span>
        <span>Command History</span>
    </div>
</div>
<div class="parserClientTop">
    <div class="statusIndicators">
        <div output-binding="Environment.Sun" title="Sun">
        </div>
        <div output-binding="Environment.Moon" title="Moon">
        </div>
        <div output-binding="Environment.Weather">
        </div>
        <div output-binding="Environment.Visibility" title="Brightness">
        </div>
    </div>
    <div style="width: 70%;">
        <div id="locationBreadcrumbs">
            <span class="contentContainer" output-data-binding="Local.ZoneName">A 20 meter by 20 meter room</span>
        </div>
        <div id="locationDescription">
            <div class="contentContainer" output-data-binding="Environment.TimeOfDay"></div>
            <div class="contentContainer" output-data-binding="Local.LocationDescriptive"></div>
        </div>
    </div>
    <div class="rightNav" id="userControls">
        <div>
            <a class="dropdown-toggle" data-toggle="dropdown" href="#"><span class="glyphicon glyphicon-th-list" title="Client Settings"></span></a>
            <ul class="dropdown-menu dropdown-menu-left" role="menu" aria-labelledby="dropdownMenu">
                <li class="dropdown-header" style="color: mediumvioletred;">Client</li>
                <li><a href="#" id="keyMap" class="moduleMenuItem"><span class="glyphicon glyphicon-new-window"></span>Key Legend</a></li>
                <li><a href="#" id="clientReload" class="moduleMenuItem"><span class="glyphicon glyphicon-refresh"></span>Reload UI</a></li>
                <li>
                    <a href="#" class="openModulePopup moduleMenuItem" data-origin-quadrant="@Model"><span class="glyphicon glyphicon-open"></span>Popup Module</a>
                    <input id="loadModulePopupName" title="Module Name?" class="moduleNameFinder" />
                </li>
                <li class="divider"></li>
                <li><a href="#" id="saveAllModules" class="moduleMenuItem"><span class="glyphicon glyphicon-upload"></span>Save All Modules</a></li>
                <li><a href="#" id="reloadAllModules" class="moduleMenuItem"><span class="glyphicon glyphicon-download"></span>Load UI From Config</a></li>
                <li><a href="#" id="wipeUI" class="moduleMenuItem"><span class="glyphicon glyphicon-remove"></span>Wipe UI</a></li>
                <li class="divider"></li>
                <li><a href="#" id="disconnect" class="moduleMenuItem"><span class="glyphicon glyphicon-remove-sign"></span>Disconnect From Server</a></li>
                <li class="dropdown-header" style="color: mediumvioletred;">Account Config</li>
                @if (@Model.AuthedUser.GameAccount.Config.UITutorialMode)
                {
                    <li><a href="#" id="tutorialModeSwap" class="moduleMenuItem" onclick="javascript: changeTutorialMode(this);"><span class="glyphicon glyphicon-info-sign" style="color:green;"></span>: Tutorial Mode</a></li>
                }
                else
                {
                    <li><a href="#" id="tutorialModeSwap" class="moduleMenuItem" onclick="javascript: changeTutorialMode(this);"><span class="glyphicon glyphicon-info-sign" style="color:red;"></span>: Tutorial Mode</a></li>
                }
                @if (@Model.AuthedUser.GameAccount.Config.GossipSubscriber)
                {
                    <li><a href="#" id="gossipSwap" class="moduleMenuItem" onclick="javascript: changeGossipMode(this);"><span class="glyphicon glyphicon-globe" style="color:green;"></span>: Gossip Network</a></li>
                }
                else
                {
                    <li><a href="#" id="gossipSwap" class="moduleMenuItem" onclick="javascript: changeGossipMode(this);"><span class="glyphicon glyphicon-globe" style="color:red;"></span>: Gossip Network</a></li>
                }
            </ul>
        </div>
        <div>
            <a class="dropdown-toggle" data-toggle="dropdown" href="#" style="padding-right: 15px;"><span class="glyphicon glyphicon-volume-up" title="Sound & Music"></span></a>
            <ul class="dropdown-menu dropdown-menu-left" role="menu" aria-labelledby="dropdownMenu">
                <li class="dropdown-header" style="color: mediumvioletred">Volume Control</li>
                <li><a href="#" id="muteSounds" class="moduleMenuItem"><span class="glyphicon glyphicon-volume-up" style="color: green;"></span>: Sound</a></li>
                <li><a href="#" id="muteMusic" class="moduleMenuItem"><span class="glyphicon glyphicon-volume-up" style="color: green;"></span>: Music</a></li>
                <li><a href="#" id="loopTracks" class="moduleMenuItem"><span class="glyphicon glyphicon-repeat" style="color: red;"></span>: Loop Track</a></li>
                @if (Model.MusicPlaylists?.Count() > 0)
                {
                    <li class="dropdown-header" style="color: mediumvioletred">Your Playlists</li>
                    for (var i = 0; i < Model.MusicPlaylists.Count(); i++)
                    {
                        <li><a href="#" class="moduleMenuItem playlistSelector" data-playlist-index="@i" onclick="javascript: changePlaylist(this);"><span class="glyphicon glyphicon-volume-off songSelection" style="color: red;"></span>@Model.MusicPlaylists.ElementAt(i).Name</a></li>
                    }
                }
                <li class="dropdown-header" style="color: mediumvioletred">Sounds of the Zone</li>
                @for (var i = 0; i < Model.MusicTracks.Count(); i++)
                {
                    var songPair = Model.MusicTracks.ElementAt(i);
                    <li><a href="#" class="moduleMenuItem audioTrackSelector" data-playlist-index="@i" data-song-uri="@songPair.Value" onclick="javascript: changeTrack(this);"><span class="glyphicon glyphicon-volume-off songSelection" style="color: red;"></span>@songPair.Key</a></li>
                }
            </ul>
        </div>
    </div>
</div>
<div class="parserClient">
    <div class="parserClientLeft sidebar">
        <div id="quadrant-1" data-module-name="" quadrant-number="1" class="quadrant">
            @Html.Partial("DockerSettings", 1)
        </div>
        <div id="quadrant-2" data-module-name="" quadrant-number="2" class="quadrant">
            @Html.Partial("DockerSettings", 2)
        </div>
    </div>
    <div class="textParserClient">
        <div id="OutputArea" class="parserOutput"></div>
    </div>
    <div class="parserClientRight sidebar">
        <div id="quadrant-3" data-module-name="" quadrant-number="3" class="quadrant">
            @Html.Partial("DockerSettings", 3)
        </div>
        <div id="quadrant-4" data-module-name="" quadrant-number="4" class="quadrant">
            @Html.Partial("DockerSettings", 4)
        </div>
    </div>
</div>
<div class="inputContainer">
    <input type="text" id="input" name="input" class="parserInput" />
</div>
<audio id="backgroundMusic" name="backgroundMusic"></audio>

@section styles {
    @Styles.Render("~/Content/GameClient.css")
    @Styles.Render("//fonts.googleapis.com/css?family=Berkshire+Swash")
}

@section scripts {
    @Scripts.Render("~/Scripts/ClientHelpers.js")
    @Scripts.Render("~/Scripts/WebSocketsClient.js")

    <script type="text/javascript">
        window.connection;
        window.soundMuted = '@Model.AuthedUser.GameAccount.Config.SoundMuted' === 'True';
        window.musicMuted = '@Model.AuthedUser.GameAccount.Config.MusicMuted' === 'True';
        window.tutorialMode = '@Model.AuthedUser.GameAccount.Config.UITutorialMode' === 'True';
        window.gossipMode = '@Model.AuthedUser.GameAccount.Config.GossipSubscriber' === 'True';
        window.loopTrack = false;
        window.currentPlaylist = 0;
        window.currentPlaylistTrack = 0;
        window.currentTrack = 0;
        window.tooltips = [];
        window.stopToggle = false;
        window.selectedInventoryItem = -1;

        window.commandArray = ['look'];
        window.commandPointer = 0;
        window.lastOutput = '';
        window.openedWindows = [];
        window.UILoading = true;
        window.BatmanMode = false;

        window.playlists = [
            @foreach(var playlist in Model.MusicPlaylists)
            {
                @Html.Raw(string.Format("{{ \"name\" : \"{0}\", songs : [ {1} ]}}", playlist.Name, string.Join(",", playlist.Songs.Select(song => "'" + song + "'"))))
            }
        ];

    $(document).ready(function () {
        $('input#loadModuleName').hide();
        $('input#loadModulePopupName').hide();

        LoadUIModules();
        submitCharacter();

        if (window.soundMuted) {
            $("#muteSounds").children().attr('class', 'glyphicon glyphicon-volume-off');
            $("#muteSounds").children().attr('style', 'color: red;');
        }
        else {
            $("#muteSounds").children().attr('class', 'glyphicon glyphicon-volume-up');
            $("#muteSounds").children().attr('style', 'color: green;');
        }

        if (window.musicMuted) {
            $("#muteMusic").children().attr('class', 'glyphicon glyphicon-volume-off');
            $("#muteMusic").children().attr('style', 'color: red;');
        }
        else {
            $("#muteMusic").children().attr('class', 'glyphicon glyphicon-volume-up');
            $("#muteMusic").children().attr('style', 'color: green;');
        }

        if ($('.audioTrackSelector') !== undefined && $('.audioTrackSelector').length > 0) {
            changeTrack($('.audioTrackSelector')[0]);
        }

        Tutorial($('.inputContainer'), "This is where you type commands. The UP and DOWN arrow keys will cycle through prior input. Hit ENTER to submit commands.", window.tutorialMode);
        Tutorial($('#userControls'), "Music tracks (and muting controls) in addition to disconnect/reconnect can be found here.", window.tutorialMode);
        Tutorial($('#locationBreadcrumbs'), "This is where you are in the ROOM.", window.tutorialMode);

        $('#disconnect').click(function (e) {
            $('#input').val('');
            $("#OutputArea").html('');
            $("#OutputArea")[0].scrollTop = $("#OutputArea")[0].scrollHeight;

            AppendTextToOutput('Connection TERMINATED.');
            window.connection.close();

            WipeUI();

            $('disconnect').off('click');
            return false;
        });

        $(".quadrantDocker[data-destination-quadrant!='-1']").click(function (e) {
            var $this = $(this);

            var originNumber = $this.attr('data-origin-quadrant');
            var $origin = $('div#quadrant-' + originNumber + '.quadrant');
            var originName = $origin.attr('data-module-name');

            var destinationNumber = $this.attr('data-destination-quadrant');
            var $destination = $('div#quadrant-' + destinationNumber + '.quadrant');
            var destinationName = $destination.attr('data-module-name');

            var myContent = $origin.children('.contentContainer');
            var theirContent = $destination.children('.contentContainer');

            myContent.detach();
            theirContent.detach();

            myContent.appendTo($destination);
            theirContent.appendTo($origin);

            $origin.attr('data-module-name', destinationName);
            $destination.attr('data-module-name', originName);

            $origin.children('ul').children('li#quadrantName').text(destinationName);
            $destination.children('ul').children('li#quadrantName').text(originName);
            return false;
       });

        $(".quadrantDocker[data-destination-quadrant='-1']").click(function (e) {
            var $this = $(this);

            var originNumber = $this.attr('data-origin-quadrant');
            var $origin = $('div#quadrant-' + originNumber + '.quadrant');
            var originName = $origin.attr('data-module-name');

            var myContent = $origin.children('.contentContainer');

            myContent.detach();
            $origin.attr('data-module-name', 'Quadrant ' + originNumber);
            $origin.children('ul').children('li#quadrantName').text('Quadrant ' + originNumber);

            openModularUI(500, 500, originName, myContent);
            return false;
        });

        $(".quadrantLoad").click(function (e) {
            $('input#loadModuleName').show().focus();
            $(this).hide();

            $('input#loadModuleName').keydown(function (e) {
                var moduleName = $(this).val();
                var originNumber = $(this).prev().attr('data-origin-quadrant');

                switch (e.keyCode) {
                    case 13: //enter
                        GetModuleUI(originNumber, moduleName);
                        break;
                    default:
                        return true;
                }

                $('input#loadModuleName').off('keydown');
                $('input#loadModuleName').hide();
                $(".quadrantLoad").show();
            });

            return false;
        });

        $(".openModulePopup").click(function (e) {
            $('input#loadModulePopupName').show().focus();
            $(this).hide();

            $('input#loadModulePopupName').keydown(function (e) {
                var moduleName = $(this).val();

                switch (e.keyCode) {
                    case 13: //enter
                        $.get('/api/ClientDataApi/GetUIModuleContent/' + moduleName, function (data) {
                            var newContent = data.BodyHtml;

                            if (newContent != '') {
                                openModularUI(500, 500, moduleName, newContent);

                                ReloadUI();
                            }
                        });
                        break;
                    default:
                        return true;
                }

                $('input#loadModulePopupName').off('keydown');
                $('input#loadModulePopupName').hide();
                $(".openModulePopup").show();
            });

            return false;
        });

        $(".quadrantSave").click(function (e) {
            var $this = $(this);

            var originNumber = $this.attr('data-origin-quadrant');
            SaveUIModule(originNumber);
            return false;
        });

        $('.quadrantWipe').click(function (e) {
            var $this = $(this);

            var originNumber = $this.attr('data-origin-quadrant');

            var $origin = $('div#quadrant-' + originNumber + '.quadrant');
            $origin.attr('data-module-name', '');
            $origin.children('ul').children('li#quadrantName').text('');

            var myContent = $origin.children('.contentContainer');

            myContent.detach();

            return false;
        });

        $("#reloadAllModules").click(function (e) {
            LoadUIModules();
            return false;
       });

        $('#wipeUI').click(function (e) {
            WipeUI();
            return false;
        });

        $("#saveAllModules").click(function (e) {
            SaveUIModule(1, function () {
                SaveUIModule(2, function () {
                    SaveUIModule(3, function () {
                        SaveUIModule(4, null)
                    })
                })
            });

            window.openedWindows.forEach(function (win) {
                var wTest = window.open("", win.Window.name);

                if (wTest.document.querySelector('#contentArea') != undefined) {
                    var contentArea = win.Window.document.querySelector('#contentArea');

                    var moduleName = $(contentArea).attr('data-module-name');
                    $.post('/api/ClientDataApi/SaveUIModuleContent/' + moduleName + '/-1');
                } else {
                    //remove it
                    $.post('/api/ClientDataApi/RemoveUIModuleContent/' + win.name + '/-1');
                }
            });

            return false;
        });

        $(".moduleNameFinder").autocomplete({
            source: "/api/ClientDataApi/GetUIModuleNames",
            minLength: 3,
            select: function (event, ui) {
                var originNumber = $(this).prev().attr('data-origin-quadrant');
                GetModuleUI(originNumber, ui.item.value);

                $('input#loadModuleName').hide();
                $(".quadrantLoad").show();
            }
        });

        $('#disconnect').click(function (e) {
            $('#input').val('');
            $("#parserClientOutput").html('');
            $("#parserClientOutput")[0].scrollTop = $("#parserClientOutput")[0].scrollHeight;

            AppendTextToOutput('Connection TERMINATED.');
            window.connection.close();

            $('disconnect').off('click');
            return false;
        });

        //bind the change event of the currently selected character dropdown to call the ajax thingy to set the player's character
        $('#currentCharacter').change(function () {
            submitCharacter();
        });

        $("#clientReload").click(function (e) {
            ReloadUI();
            return false;
        });

        $("#keyMap").click(function (e) {
            $('.keyLegend').toggleClass('expanded');
            return false;
        });

        $('#loopTracks').click(function () {
            changeLoopTrackMode(this);
            return false;
        });


        $("#muteSounds").click(function (e) {
            window.soundMuted = !soundMuted;

            $.post('/api/ClientDataApi/ToggleSoundMute');

            if (window.soundMuted) {
                $(this).children().attr('class', 'glyphicon glyphicon-volume-off');
                $(this).children().attr('style', 'color: red;');
            }
            else {
                $(this).children().attr('class', 'glyphicon glyphicon-volume-up');
                $(this).children().attr('style', 'color: green;');
            }

            return false;
        });

        $("#muteMusic").click(function (e) {
            window.musicMuted = !musicMuted;

            $.post('/api/ClientDataApi/ToggleMusicMute');

            if (window.musicMuted) {
                $('#backgroundMusic')[0].pause();
                $(this).children().attr('class', 'glyphicon glyphicon-volume-off');
                $(this).children().attr('style', 'color: red;');
            }
            else {
                $('#backgroundMusic')[0].play();
                $(this).children().attr('class', 'glyphicon glyphicon-volume-up');
                $(this).children().attr('style', 'color: green;');
            }

            return false;
        });

        TestBrowser();
    });
    </script>
}
