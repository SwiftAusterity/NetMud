@using NetMud.DataStructure.Base.Supporting
@using NetMud.Utility

@model NetMud.Models.Admin.AddEditDimensionalModelDataViewModel

@{
    ViewBag.Title = "Edit Dimensional Model";
    var i = 0;
}

<section id="newCharacterForm">
    @using (Html.BeginForm("Edit", "DimensionalModel", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group row">
            @Html.EditorFor(e => e.Name, new { columnCount = 3 })
            @Html.EditorFor(e => e.ModelType, new { columnCount = 3 })
        </div>
        <div class="form-group row">
            @Html.EditorFor(e => e.HelpText, new { columnCount = 1 })
        </div>
        <div class="form-group row">
            @Html.EditorFor(e => e.ModelFile, new { columnCount = 1 })
        </div>
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">-OR-</label>
        </div>
        <div class="clearfix"></div>
        <h3>Manual Model</h3>
        <hr />
        for (i = 10; i >= 0; i--)
        {
            <div class="row">
                <div>
                    <label id="lblModelPlaneNames" name="lblModelPlaneNames" for="ModelPlaneNames" class="col-sm-1 col-form-label">Name</label>
                    <input type="text" id="ModelPlaneNames" name="ModelPlaneNames" value="@Model.DataObject.ModelPlanes.ElementAt(i).TagName" class="col-sm-1" />
                </div>
                <div>
                    <label id="lblCoordinateDamageTypes" name="lblCoordinateDamageTypes" for="CoordinateDamageTypes" class="col-sm-1 col-form-label">X-Plane</label>
                    @Html.DropDownList("CoordinateDamageTypes", Enum.GetNames(typeof(DamageType)).Select(rl =>
                    new SelectListItem()
                    {
                        Text = ((DamageType)Enum.Parse(typeof(DamageType), rl)).GetDescription(),
                        Value = ((short)Enum.Parse(typeof(DamageType), rl)).ToString(),
                        Selected = rl.Equals(Enum.GetName(typeof(DamageType), Model.DataObject.ModelPlanes.ElementAt(i).ModelNodes.ElementAt(0).Style))
                    }), htmlAttributes: new { id = "CoordinateDamageTypes", @class = "dimModelNode edge" })

                    @Html.DropDownList("CoordinateDamageTypes", Enum.GetNames(typeof(DamageType)).Select(rl =>
                    new SelectListItem()
                    {
                        Text = ((DamageType)Enum.Parse(typeof(DamageType), rl)).GetDescription(),
                        Value = ((short)Enum.Parse(typeof(DamageType), rl)).ToString(),
                        Selected = rl.Equals(Enum.GetName(typeof(DamageType), Model.DataObject.ModelPlanes.ElementAt(i).ModelNodes.ElementAt(1).Style))
                    }), htmlAttributes: new { id = "CoordinateDamageTypes", @class = "dimModelNode exterior" })
                    @Html.DropDownList("CoordinateDamageTypes", Enum.GetNames(typeof(DamageType)).Select(rl =>
                    new SelectListItem()
                    {
                        Text = ((DamageType)Enum.Parse(typeof(DamageType), rl)).GetDescription(),
                        Value = ((short)Enum.Parse(typeof(DamageType), rl)).ToString(),
                        Selected = rl.Equals(Enum.GetName(typeof(DamageType), Model.DataObject.ModelPlanes.ElementAt(i).ModelNodes.ElementAt(2).Style))
                    }), htmlAttributes: new { id = "CoordinateDamageTypes", @class = "dimModelNode exterior" })
                    @Html.DropDownList("CoordinateDamageTypes", Enum.GetNames(typeof(DamageType)).Select(rl =>
                    new SelectListItem()
                    {
                        Text = ((DamageType)Enum.Parse(typeof(DamageType), rl)).GetDescription(),
                        Value = ((short)Enum.Parse(typeof(DamageType), rl)).ToString(),
                        Selected = rl.Equals(Enum.GetName(typeof(DamageType), Model.DataObject.ModelPlanes.ElementAt(i).ModelNodes.ElementAt(3).Style))
                    }), htmlAttributes: new { id = "CoordinateDamageTypes", @class = "dimModelNode interior" })
                    @Html.DropDownList("CoordinateDamageTypes", Enum.GetNames(typeof(DamageType)).Select(rl =>
                    new SelectListItem()
                    {
                        Text = ((DamageType)Enum.Parse(typeof(DamageType), rl)).GetDescription(),
                        Value = ((short)Enum.Parse(typeof(DamageType), rl)).ToString(),
                        Selected = rl.Equals(Enum.GetName(typeof(DamageType), Model.DataObject.ModelPlanes.ElementAt(i).ModelNodes.ElementAt(4).Style))
                    }), htmlAttributes: new { id = "CoordinateDamageTypes", @class = "dimModelNode interior" })
                    @Html.DropDownList("CoordinateDamageTypes", Enum.GetNames(typeof(DamageType)).Select(rl =>
                    new SelectListItem()
                    {
                        Text = ((DamageType)Enum.Parse(typeof(DamageType), rl)).GetDescription(),
                        Value = ((short)Enum.Parse(typeof(DamageType), rl)).ToString(),
                        Selected = rl.Equals(Enum.GetName(typeof(DamageType), Model.DataObject.ModelPlanes.ElementAt(i).ModelNodes.ElementAt(5).Style))
                    }), htmlAttributes: new { id = "CoordinateDamageTypes", @class = "dimModelNode center" })
                    @Html.DropDownList("CoordinateDamageTypes", Enum.GetNames(typeof(DamageType)).Select(rl =>
                    new SelectListItem()
                    {
                        Text = ((DamageType)Enum.Parse(typeof(DamageType), rl)).GetDescription(),
                        Value = ((short)Enum.Parse(typeof(DamageType), rl)).ToString(),
                        Selected = rl.Equals(Enum.GetName(typeof(DamageType), Model.DataObject.ModelPlanes.ElementAt(i).ModelNodes.ElementAt(6).Style))
                    }), htmlAttributes: new { id = "CoordinateDamageTypes", @class = "dimModelNode interior" })

                    @Html.DropDownList("CoordinateDamageTypes", Enum.GetNames(typeof(DamageType)).Select(rl =>
                    new SelectListItem()
                    {
                        Text = ((DamageType)Enum.Parse(typeof(DamageType), rl)).GetDescription(),
                        Value = ((short)Enum.Parse(typeof(DamageType), rl)).ToString(),
                        Selected = rl.Equals(Enum.GetName(typeof(DamageType), Model.DataObject.ModelPlanes.ElementAt(i).ModelNodes.ElementAt(7).Style))
                    }), htmlAttributes: new { id = "CoordinateDamageTypes", @class = "dimModelNode interior" })

                    @Html.DropDownList("CoordinateDamageTypes", Enum.GetNames(typeof(DamageType)).Select(rl =>
                    new SelectListItem()
                    {
                        Text = ((DamageType)Enum.Parse(typeof(DamageType), rl)).GetDescription(),
                        Value = ((short)Enum.Parse(typeof(DamageType), rl)).ToString(),
                        Selected = rl.Equals(Enum.GetName(typeof(DamageType), Model.DataObject.ModelPlanes.ElementAt(i).ModelNodes.ElementAt(8).Style))
                    }), htmlAttributes: new { id = "CoordinateDamageTypes", @class = "dimModelNode exterior" })

                    @Html.DropDownList("CoordinateDamageTypes", Enum.GetNames(typeof(DamageType)).Select(rl =>
                    new SelectListItem()
                    {
                        Text = ((DamageType)Enum.Parse(typeof(DamageType), rl)).GetDescription(),
                        Value = ((short)Enum.Parse(typeof(DamageType), rl)).ToString(),
                        Selected = rl.Equals(Enum.GetName(typeof(DamageType), Model.DataObject.ModelPlanes.ElementAt(i).ModelNodes.ElementAt(9).Style))
                    }), htmlAttributes: new { id = "CoordinateDamageTypes", @class = "dimModelNode exterior" })

                    @Html.DropDownList("CoordinateDamageTypes", Enum.GetNames(typeof(DamageType)).Select(rl =>
                    new SelectListItem()
                    {
                        Text = ((DamageType)Enum.Parse(typeof(DamageType), rl)).GetDescription(),
                        Value = ((short)Enum.Parse(typeof(DamageType), rl)).ToString(),
                        Selected = rl.Equals(Enum.GetName(typeof(DamageType), Model.DataObject.ModelPlanes.ElementAt(i).ModelNodes.ElementAt(10).Style))
                    }), htmlAttributes: new { id = "CoordinateDamageTypes", @class = "dimModelNode edge" })
                </div>
            </div>
        }

        <div class="clearfix"></div>
        @Html.Partial("SubmitButton", new NetMud.Models.SubmitButtonModel() { SubmitName = "Save", CancelName = "Cancel", ReturnAction = "Index", ReturnController = "Dimensional Model", IncludeCancel = true })
    }
</section>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $('select.dimModelNode').each(function () {
                $(this).attr('data-value', $(this).children(':selected').val());
            }).on('change', function (ev) {
                $(this).attr('data-value', $(this).children(':selected').val());
            });
        });
    </script>
}
