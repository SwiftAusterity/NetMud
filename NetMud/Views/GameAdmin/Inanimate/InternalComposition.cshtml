@model NetMud.Models.Admin.AddEditInanimateDataViewModel


<h3>Internal composition</h3>
<a href="#" id="addInternalCompositionRow" class="addRow">Add another row...</a>
<div id="internalCompositionRows">
    @if (Model.DataObject == null || Model.DataObject.InternalComposition == null || Model.DataObject.InternalComposition.Count == 0)
    {
        <div class="form-group row">
            <label class="col-sm-1 col-form-label"><a href="#" class="removeRow" id="removeInternalCompositionRow" title="Remove this">X</a></label>
            @Html.Partial("BackingDataDropdown", new NetMud.Models.Admin.ReferenceDataDropdownModel("InternalCompositionIds", "Piece", Model.ValidInanimateDatas, -1))
            @Html.LabelFor(m => m.InternalCompositionPercentages, new { @class = "col-sm-1 col-form-label" })
            <div class="col-md-3">
                @Html.TextBoxFor(m => m.InternalCompositionPercentages, new { @class = "form-control" })
            </div>
        </div>
    }
    else
    {
        foreach (var internalComposition in Model.DataObject.InternalComposition)
        {
            <div class="form-group row">
                <label class="col-sm-1 col-form-label"><a href="#" class="removeRow" id="removeInternalCompositionRow" title="Remove this">X</a></label>
                @Html.Partial("BackingDataDropdown", new NetMud.Models.Admin.ReferenceDataDropdownModel("InternalCompositionIds", "Inanimate", Model.ValidInanimateDatas, internalComposition.Key.Id))

                @Html.LabelFor(m => m.InternalCompositionPercentages, new { @class = "col-sm-1 col-form-label" })
                <div class="col-md-3">
                    <input id="InternalCompositionPercentages" name="InternalCompositionPercentages" class="form-control" type="text" value="@internalComposition.Value.ToString()">
                </div>
            </div>
        }
    }
</div>

<script type="text/javascript">
    $(document).ready(function () {
        var compositionDropdown = decodeHtml('@Html.Partial("BackingDataDropdown", new NetMud.Models.Admin.ReferenceDataDropdownModel("InternalCompositionIds", "Inanimate", Model.ValidInanimateDatas, -1)).ToString().Replace(Environment.NewLine, "")');
        var textboxLabel = decodeHtml('@Html.LabelFor(m => m.InternalCompositionPercentages, new { @class = "col-sm-1 col-form-label" }).ToString().Replace(Environment.NewLine, "")');
        var textboxControl = decodeHtml('@Html.TextBoxFor(m => m.InternalCompositionPercentages, new { @class = "form-control" }).ToString().Replace(Environment.NewLine, "")');

        $("#addInternalCompositionRow").click(function () {
            $("#internalCompositionRows").append(
                '<div class="form-group row">' +
                '<label class="col-sm-1 col-form-label"><a href="#" class="removeRow" id="removeInternalCompositionRow" title="Remove this">X</a></label>' +
                compositionDropdown +
                textboxLabel + '<div class="col-md-3">' + textboxControl + '</div></div>'
            );

            $(".removeRow").click(function () {
                $(this).parent().parent().remove();
                return false;
            });
            return false;
        });

        $(".removeRow").click(function () {
            $(this).parent().parent().remove();
            return false;
        });
    });
</script>