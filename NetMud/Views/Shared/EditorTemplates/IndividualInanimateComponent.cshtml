@using NetMud.Data.Inanimate
@using NetMud.DataStructure.Inanimate

@model InanimateComponent

@{
    double columnCount = ViewData["columnCount"] == null ? 5 : (int)ViewData["columnCount"];
    bool disabled = ViewData["disabled"] != null;
    var columnLabelValue = columnCount > 2 ? 1 : 2;
    var columnInputValue = (int)Math.Round(10 / columnCount);
    var cssClass = ViewData["cssClass"] == null ? "form-control" : ViewData["cssClass"];
    var forceOptional = ViewData["forceOptional"] != null;
    var forceBlankValue = Model == null || Model.GetType().IsArray ? true : false;
    var ghostNameClass = "ghostNameTip";
    var strippedNaked = ViewData["strippedNaked"] != null;

    if (ViewData.ModelMetadata.IsRequired && !forceOptional)
    {
        ghostNameClass += " ghostRequired";
    }

    var htmlAttributes = new Dictionary<string, object>() { { "class", cssClass }, { "placeholder", ViewData.ModelMetadata.DisplayName }, { "title", ViewData.ModelMetadata.DisplayName } };

    if (ViewData["disabled"] != null)
    {
        htmlAttributes.Add("readonly", true);
    }

    if (ViewData["htmlAttributes"] != null)
    {
        var additionalAttribs = ViewData["htmlAttributes"] as IDictionary<string, object>;

        if (additionalAttribs != null)
        {
            foreach (var kvp in additionalAttribs)
            {
                htmlAttributes.Add(kvp.Key, kvp.Value);
            }
        }
    }

    if (forceBlankValue && !htmlAttributes.ContainsKey("Value"))
    {
        htmlAttributes.Add("Value", "");
    }

    ViewData.Add("strippedNaked", "true");

    var itemList = ((IEnumerable<IInanimateTemplate>)ViewData["validItems"]).Select(item => new SelectListItem() { Text = item.Name, Value = item.Id.ToString(), Selected = Model != null && Model.Item != null && item.Id == Model.Item.Id });
}

@if (strippedNaked)
{
    @Html.DescriptionFor(m => m)
    <div style="display: inline-flex;">
        @Html.EditorFor(m => m.Amount, htmlAttributes)<span class="multiBoxUnit">of</span>@Html.EditorFor(m => m.Item, htmlAttributes)
    </div>
}
else
{
    <div class="col-sm-@columnInputValue">
        <span class="@ghostNameClass">@ViewData.ModelMetadata.DisplayName</span>
        @Html.DescriptionFor(m => m)
        <div style="display: inline-flex;">
            @Html.EditorFor(m => m.Amount, htmlAttributes)<span class="multiBoxUnit">of</span>@Html.EditorFor(m => m.Item, htmlAttributes)
        </div>
    </div>
}