@model Enum

@{

    bool disabled = ViewData["disabled"] != null;


    var cssClass = ViewData["cssClass"] == null ? "form-control" : ViewData["cssClass"];
    var htmlAttributes = new Dictionary<string, object>() { { "class", cssClass }, { "placeholder", ViewData.ModelMetadata.DisplayName }, { "title", ViewData.ModelMetadata.DisplayName } };
    var archivedValue = ViewData["archivedValue"] == null ? "" : ViewData["archivedValue"].ToString();
    var strippedNaked = ViewData["strippedNaked"] != null;

    if (ViewData["disabled"] != null)
    {
        htmlAttributes.Add("readonly", true);
    }

    if (ViewData["htmlAttributes"] != null)
    {
        var additionalAttribs = ViewData["htmlAttributes"] as IDictionary<string, object>;
        if (additionalAttribs != null)
        {
            foreach (var kvp in additionalAttribs)
            {
                htmlAttributes.Add(kvp.Key, kvp.Value);
            }
        }
    }

    var selectedItemOverride = ViewData["selectedItem"];

    if (selectedItemOverride != null)
    {
        ViewData.Model = (Enum)selectedItemOverride;
    }

    var removeName = "remove" + ViewData.ModelMetadata.PropertyName + "Row";
}

<div class="form-group row">
    <a href="#" class="removeRow col-form-label" title="Remove this" onclick="javascript: $(this).parent().remove(); return false;">X</a>
    <div>
        @Html.EnumDropDownListFor(m => m, optionLabel: "Select One", htmlAttributes: htmlAttributes)
    </div>
</div>