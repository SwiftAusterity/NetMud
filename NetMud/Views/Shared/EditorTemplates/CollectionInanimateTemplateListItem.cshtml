@using NetMud.DataStructure.Inanimate

@model IInanimateTemplate

@{
    double columnCount = ViewData["columnCount"] == null ? 5 : (int)ViewData["columnCount"];
    bool disabled = ViewData["disabled"] != null;
    var columnLabelValue = columnCount > 2 ? 1 : 2;
    var columnInputValue = (int)Math.Round(10 / columnCount);
    var cssClass = ViewData["cssClass"] == null ? "form-control" : ViewData["cssClass"];
    var htmlAttributes = new Dictionary<string, object>() { { "class", cssClass }, { "placeholder", ViewData.ModelMetadata.DisplayName }, { "title", ViewData.ModelMetadata.DisplayName } };
    var archivedValue = ViewData["archivedValue"] == null ? "" : ViewData["archivedValue"].ToString();

    if (ViewData["disabled"] != null)
    {
        htmlAttributes.Add("disabled", true);
    }

    if (ViewData["htmlAttributes"] != null)
    {
        var additionalAttribs = ViewData["htmlAttributes"] as IDictionary<string, object>;
        if (additionalAttribs != null)
        {
            foreach (var kvp in additionalAttribs)
            {
                htmlAttributes.Add(kvp.Key, kvp.Value);
            }
        }
    }

    var selectedItemOverride = ViewData["selectedItem"];

    if (selectedItemOverride != null)
    {
        ViewData.Model = (IInanimateTemplate)selectedItemOverride;
    }

    IEnumerable<SelectListItem> validList = ((IEnumerable<IInanimateTemplate>)ViewData["validItems"]).Select(li => new SelectListItem() { Text = li.Name, Value = li.Id.ToString(), Selected = Model != null && li.Id == Model.Id });

    var listItems = new List<SelectListItem>() { new SelectListItem() { Text = "Select One", Value = "-1" } };
    listItems.AddRange(validList);

    var removeName = "remove" + ViewData.ModelMetadata.PropertyName + "Row";

}

<div class="form-group row">
    <a href="#" class="removeRow col-form-label" title="Remove this" onclick="javascript: $(this).parent().remove(); return false;">X</a>
    <div class="col-sm-@columnInputValue">
        @Html.DropDownListFor(m => m, listItems, htmlAttributes: htmlAttributes)

        @if (!string.IsNullOrWhiteSpace(archivedValue))
        {
            <span class="archive">Archived Value: @archivedValue</span>
            <span title="apply value to field" class="glyphicon glyphicon-plus archiveApply" onclick="javascript: $('#@ViewData.ModelMetadata.PropertyName').val('@archivedValue');"></span>
        }

        @Html.ValidationMessageFor(m => m, "", new { @class = "text-danger" })
    </div>
</div>
